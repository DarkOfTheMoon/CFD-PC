/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interThermalPhaseChangeFoam_SGS;

startFrom       latestTime;

startTime       0.0;

stopAt          endTime;

endTime         2.0;

deltaT          1E-6;

writeControl    adjustableRunTime;
writeInterval   0.1;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  on;

maxCo           0.4;
maxUbetaCo      0.4;
maxAlphaCo      0.4;
maxFourier	    0.25;

maxDeltaT       1E-2;

//Combined Hydrostatic Pressure
CombinedHSPressure no;


//Global vars for funky/groovy
functions
(

        VolumeLiquid //Gives the volume of the liquid phase
        {
                functionObjectLibs ("libutilityFunctionObjects.so");
                type coded;
                redirectType VolumeLiquid;
                outputControl timeStep;
                outputInterval 10;
                code          
                #{    
           			    //Sum up liquid volume:
            		  	const volScalarField& alpha1 = mesh().lookupObject<volScalarField>("alpha1");
						const volScalarField& beta = mesh().lookupObject<volScalarField>("beta");
						//const volScalarField& nuEff = mesh().lookupObject<volScalarField>("nuEff");
                  	    const scalar VolLiquid = gSum( mesh().V() * alpha1.internalField() );
                  	    const scalar VolSmallBubble = gSum( mesh().V() * beta.internalField() );
                        //***********************************************************************

                        //Finally print out results:

                        //Get t
                        scalar t = mesh().time().value();          

                        //Now write out data:
                        if( Pstream::master() == true )
                        {
                                std::ofstream fs;
                                fs.open ("SummaryData.dat", std::fstream::app);
                                fs.precision(12);
                                fs << t << "\t" << VolLiquid << "\t" << VolSmallBubble << "\n";
                                fs.close();
                        }

                #};

                codeInclude
                #{
                        #include <fstream>
                #};
        }

);


libs (
    "libOpenFOAM.so"
    "libgroovyBC.so"
    "libsimpleSwakFunctionObjects.so"
    "libswakFunctionObjects.so"
    "libtwoPhaseProperties.so"
    "libinterfaceProperties.so"
    );
// ************************************************************************* //
